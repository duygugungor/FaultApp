@page "/fault"
@inject HttpClient http
@inject HttpClient client
@inject NavigationManager uriHelper
@inject IJSRuntime js

<h3>Mevcut Arıza Listesi</h3>
@*<Alert Color="Color.Info" Visible="true">
    <Heading Size="HeadingSize.Is4" TextColor="TextColor.Success">
        Big one!
        <CloseButton />
    </Heading>
    <Paragraph>
        Lorem ipsum dolor sit amet, consectetur adipisicing elit. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Cras mattis consectetur purus sit amet fermentum.
    </Paragraph>
    <Paragraph>
        <Button Color="Color.Info">Wanna do this</Button>
        <Button Color="Color.Light">Or do this</Button>
    </Paragraph>
</Alert>*@
<br>

@if (faultList == null)
{
    <text>Yükleniyor...</text>
}
else if (faultList.Count == 0)
{
    <text>Kayıt bulunamadı.</text>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Bölüm</th>
                <th>Makina</th>
                <th>Operatör</th>
                <th>Tarih</th>
                <th>Açıklama</th>
                @*<th>Durum</th>*@
            </tr>
        </thead>
        <tbody>
            @foreach (BlazorApp4.Shared.Models.Fault faul in faultList)
            {
                @if (faul.Status == 0)
                {

                    <tr>
                        <td>@faul.MakinaGrubu</td>
                        <td>@faul.Makina</td>
                        <td>@faul.Operator</td>
                        <td>@faul.CreatedTime</td>
                        <td>@faul.Description</td>
                        @*<td>@statusLabel(@faul.Status.ToString())</td>*@
                        <td>
                            <Button Color="Color.Warning" Clicked="@(e => GetFaultAndShowModal(faul.Id))">Bitir</Button>

                        </td>
                        @*<td>
                        <a class="btn btn-success" href="fault/edit/@faul.Id">Edit</a>
                    </td>*@

                    </tr>
                }

            }

        </tbody>
    </table>
                    <Modal @ref="modalRef">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <ModalHeader>
            <ModalTitle>Arıza Bitir</ModalTitle>
            <CloseButton Clicked="@HideModal" />
        </ModalHeader>
        <ModalBody>
 
            <EditForm Model="@faultToEdit" OnValidSubmit="@EditFault">
                <DataAnnotationsValidator />
                <CardDeck>
                    <Card>

                        <CardBody>


                            <label>Bölüm : </label>
                            <TextEdit Disabled="true" Text="@faultToEdit.MakinaGrubu" />



                            <label>Makina : </label>
                            <TextEdit Disabled="true" Text="@faultToEdit.Makina" />




                            <label>Operatör : </label>

                            <TextEdit Disabled="true" Text="@faultToEdit.Operator" />


                            <label>Açıklama :</label>


                            <TextEdit Disabled="true" Text="@faultToEdit.Description" />


                            @*<button type="submit" class="btn btn-success" @onclick="(() => CreateFault())">
                        Kaydet
                    </button>*@
                        </CardBody>
                    </Card>
                    <Card>
                        <CardBody>
                            <div>
                                <div>
                                    <div>
                                        <label>Kullanıcı Adı</label>
                                    </div>

                                    <InputText @bind-Value="@faultToEdit.FixBy">
                                        @*<option value="">Lütfen Adınızı Giriniz...</option>*@
                                    </InputText>
                                </div>
                                <div>
                                    <div>
                                        <label>Yapılan İşlemler</label>
                                    </div>

                                    <InputTextArea @bind-Value="@faultToEdit.FixDescription" rows="7" cols="42" />
                                    @*<option value="">Lütfen Açıklama Giriniz...</option>*@
                                </div>
                                <div>
                                    <div>

                                        <label>Arıza Bitiş Tarih</label>
                                    </div>
  
                                 
                                <InputDate @bind-Value="@dateTime1">
      
                                    </InputDate>
                                    </div>

                                <hr />
                                @*<button type="submit" class="btn btn-success" @onclick="(() => EditFault())">
                            Kaydet
                        </button>*@
                            </div>



                        </CardBody>
                    </Card>
                    </CardDeck>
            </EditForm>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Kapat</Button>
            <Button Color="Color.Primary" Clicked="@(() => SaveChanges())">Kaydet</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
    

}
@code {

    public DateTime dateTime1 = DateTime.Now;




    //protected override async Task OnInitializedAsync()
    //{
    //    faults = await client.GetFromJsonAsync<FaultList[]>("api/fault");
    //}

    List<BlazorApp4.Shared.Models.Fault> faultList { get; set; }
    [Parameter] public BlazorApp4.Shared.Models.Fault selectedFault { get; set; }
    protected override async Task OnInitializedAsync()
    {
        faultList = await client.GetFromJsonAsync<List<BlazorApp4.Shared.Models.Fault>>("api/fault");


    }

    [Parameter] public BlazorApp4.Shared.Models.Fault faultToEdit { get; set; } = new BlazorApp4.Shared.Models.Fault();

    [Parameter] public int faultId { get; set; }

    public String statusLabel(String text)
    {
        if (text == "REPORTED")
        {
            return "RAPOR EDİLDİ";
        }
        else if (text == "FIXING")
        {
            return "TAMİR EDİLİYOR";
        }
        else if (text == "FIXED")
        {
            return "TAMİR EDİLDİ";
        }
        else
        {
            return " - ";
        }
    }

    private Modal modalRef;

    private void ShowModal()
    {

        //   selectedFault = fault;
        modalRef.Show();
    }
    private void EditFault()
    {

    }

    async  Task SaveChanges()
    {
        faultToEdit.Status = BlazorApp4.Shared.Models.FaultStatus.FIXED;
        faultToEdit.FixedTime = dateTime1;
        await http.PutAsJsonAsync($"api/fault", faultToEdit);
        modalRef.Hide();


    }
    private void HideModal()
    {
        selectedFault = null;
        modalRef.Hide();
    }

    public async void GetFaultAndShowModal(int id)
    {
        faultToEdit = await http.GetFromJsonAsync<BlazorApp4.Shared.Models.Fault>($"api/fault/{id}");
        ShowModal();
    }

}
